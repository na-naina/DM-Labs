#include <iostream>

class set {
	public:
		char SetElement[32000];
		int SetSize;
};

set Universal;

void OutputSet(set a) {
	if (a.SetSize != 0) {
		std::cout << a.SetSize << std::endl;
		for (int i = 0; i < a.SetSize; i++)
			std::cout << a.SetElement[i] << ' ';
		std::cout << std::endl;
	}
	else
		std::cout << "This set is empty";
}

set ReadSet(set a) {
	std::cout << "Enter set size and an equal number of elements\n";
	std::cin >> a.SetSize;
	for (int i = 0; i < a.SetSize; i++) {
		std::cin >> a.SetElement[i];
		bool InUniversal = false;
		for (int j = 0; j < Universal.SetSize; j++) {
			if (a.SetElement[i] == Universal.SetElement[j]) 
				InUniversal = true;
		}
		if (!InUniversal) {
			std::cout << "This element is not a part of the Universal set\nEnter another element\n";
			i--;
		}
		for (int j = 0; j < i; j++) 
			if (a.SetElement[i] == a.SetElement[j]) {
				std::cout << "This element is already a part of the set\nEnter another element\n";
				i--;
			}

	}
	return a;
}

set Intersect(set a, set b) {
	set I;
	I.SetSize = 0;
	for (int i = 0; i < b.SetSize; i++) {
		bool repeat = false;
		for (int j = 0; j < a.SetSize; j++)
			if (b.SetElement[i] == a.SetElement[j])
				repeat = true;
		if (repeat == true) {
			I.SetSize++;
			I.SetElement[I.SetSize-1] = b.SetElement[i];
		}
	}
	return I;
}

set Union(set a, set b) {
	set U;
	U = a;
	for (int i = 0; i < b.SetSize; i++) {
		bool repeat = false;
		for (int j = 0; j < a.SetSize; j++)
			if (b.SetElement[i] == a.SetElement[j])
				repeat = true;
		if (repeat == false) {
			U.SetSize++;
			U.SetElement[U.SetSize - 1] = b.SetElement[i];
		}
	}
	return U;
}

set Differ(set a, set b) {
	set D;
	D.SetSize = 0;
	for (int i = 0; i < a.SetSize; i++) {
		bool repeat = false;
		for (int j = 0; j < b.SetSize; j++)
			if (a.SetElement[i] == b.SetElement[j])
				repeat = true;
		if (repeat == false) {
			D.SetSize++;
			D.SetElement[D.SetSize - 1] = a.SetElement[i];
		}
	}
	return D;
}

set Compliment(set a) {
	return(Differ(Universal, a));
}

int main()
{
	set A, B, C;
	std::cout << "Enter the Universal set size and an equal number of elements\n";
	std::cin >> Universal.SetSize;
	for (int i = 0; i < Universal.SetSize; i++) {
		std::cin >> Universal.SetElement[i];
		for (int j = 0; j < i; j++)
			if (Universal.SetElement[i] == Universal.SetElement[j]) {
				std::cout << "This element is already a part of the set\nEnter another element\n";
				i--;
			}

	}

	A = ReadSet(A);
	B = ReadSet(B);
	//C = ReadSet(C);
	OutputSet(Union(A, B));
	OutputSet(Intersect(A, B));
	OutputSet(Differ(A, B));
	OutputSet(Compliment(A));
	return 0;
}

